{
  "results": {
    "nrk_nn": {
      "acc,none": 0.3416541353383459,
      "acc_stderr,none": 0.0056564143638331895,
      "acc_norm,none": 0.3294736842105263,
      "acc_norm_stderr,none": 0.005649017151124711,
      "alias": "nrk_nn"
    },
    "prompt-0": {
      "acc,none": 0.5503759398496241,
      "acc_stderr,none": 0.013645580036790683,
      "acc_norm,none": 0.5052631578947369,
      "acc_norm_stderr,none": 0.013714609675891552,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "acc,none": 0.3406015037593985,
      "acc_stderr,none": 0.012999742990925859,
      "acc_norm,none": 0.32105263157894737,
      "acc_norm_stderr,none": 0.012806890056072955,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "acc,none": 0.24812030075187969,
      "acc_stderr,none": 0.011847939790578446,
      "acc_norm,none": 0.24812030075187969,
      "acc_norm_stderr,none": 0.011847939790578446,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "acc,none": 0.24736842105263157,
      "acc_stderr,none": 0.011835888255810632,
      "acc_norm,none": 0.24736842105263157,
      "acc_norm_stderr,none": 0.011835888255810632,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "acc,none": 0.3218045112781955,
      "acc_stderr,none": 0.012814776077976016,
      "acc_norm,none": 0.3255639097744361,
      "acc_norm_stderr,none": 0.012853637220138199,
      "alias": " - prompt-4"
    }
  },
  "groups": {
    "nrk_nn": {
      "acc,none": 0.3416541353383459,
      "acc_stderr,none": 0.0056564143638331895,
      "acc_norm,none": 0.3294736842105263,
      "acc_norm_stderr,none": 0.005649017151124711,
      "alias": "nrk_nn"
    }
  },
  "group_subtasks": {
    "nrk_nn": [
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "ltg/nrk",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "def p0(doc):\n    prompt = \"Spørsmål: {question}\\n\\nSvar:\"\n    return prompt.format(question=doc[\"question\"])\n",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "ltg/nrk",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "def p1_nn(doc):\n    prompt = \"{question}\\n\\nSvaralternativer:{choices}\\n\\nKva er rett svar?\\n\\nSvar:\"\n    choices = \"\".join(list(map(lambda choice: f\"\\n- {choice}\", doc[\"choices\"][\"text\"])))\n    return prompt.format(question=doc[\"question\"], choices=choices)\n",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "ltg/nrk",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "def p2_nn(doc):\n    prompt = \"{question}{choices}\\n\\nEr det rette svaret {enumerated_choices}?\\n\\nSvar:\"\n    choices = \"\".join(\n        [\n            f\"\\n{label}: {option}\"\n            for label, option in zip(doc[\"choices\"][\"label\"], doc[\"choices\"][\"text\"])\n        ]\n    )\n    enumerated_choices = \", \".join(\n        doc[\"choices\"][\"label\"][:-1]\n    ) + \", eller {latest_choice}\".format(latest_choice=doc[\"choices\"][\"label\"][-1])\n    if len(doc[\"choices\"][\"label\"]) == 2:\n        enumerated_choices = enumerated_choices.replace(\", eller\", \" eller\")\n    return prompt.format(\n        question=doc[\"question\"], choices=choices, enumerated_choices=enumerated_choices\n    )\n",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.label}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "ltg/nrk",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "def p3_nn(doc):\n    prompt = \"Spørsmål: {question}{choices}\\n\\nSvar:\"\n    choices = \"\".join(\n        [\n            f\"\\n{label}: {option}\"\n            for label, option in zip(doc[\"choices\"][\"label\"], doc[\"choices\"][\"text\"])\n        ]\n    )\n    return prompt.format(question=doc[\"question\"], choices=choices)\n",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.label}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "ltg/nrk",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "def p4_nn(doc):\n    prompt = \"{question}\\nVel rett svar blant desse alternativa:{choices}\\n\\nSvar:\"\n    choices = \"\".join(list(map(lambda choice: f\"\\n- {choice}\", doc[\"choices\"][\"text\"])))\n    return prompt.format(question=doc[\"question\"], choices=choices)\n",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml"
  },
  "n-shot": {
    "nrk_nn": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-7b-untranslated-withnewspapers,cache_dir=/pfs/lustrep3/scratch/project_465000498/models/",
    "batch_size": "64",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1717553699.3277085,
  "pretty_env_info": "PyTorch version: 1.13.1+rocm5.2\nIs debug build: False\nCUDA used to build PyTorch: N/A\nROCM used to build PyTorch: 5.2.21151-afdc89f8\n\nOS: SUSE Linux Enterprise Server 15 SP4 (x86_64)\nGCC version: (SUSE Linux) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.4\nLibc version: glibc-2.31\n\nPython version: 3.9.12 (main, Apr 18 2022, 21:29:31)  [GCC 9.3.0 20200312 (Cray Inc.)] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.75-cray_shasta_c-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nNvidia driver version: Could not collect\ncuDNN version: Could not collect\nHIP runtime version: 5.2.21153\nMIOpen runtime version: 2.17.0\nIs XNNPACK available: True\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.24.2\n[pip3] numpyencoder==0.3.0\n[pip3] torch==1.13.1+rocm5.2\n[pip3] torchaudio==0.13.1+rocm5.2\n[pip3] torchmetrics==0.9.3\n[pip3] torchvision==0.14.1+rocm5.2\n[conda] Could not collect",
  "transformers_version": "4.37.1",
  "upper_git_hash": null
}