{
  "results": {
    "norsumm_nb": {
      "bleu_max,none": 6.606086146287234,
      "bleu_max_stderr,none": 0.8728772691017712,
      "bertscore_f1_max,none": 0.43128086047040093,
      "bertscore_f1_max_stderr,none": 0.014856492199396505,
      "rougeL_max,none": 16.93764908422643,
      "rougeL_max_stderr,none": 1.2079451460750974,
      "bertscore_f1_avg,none": 0.4206248325330239,
      "bertscore_f1_avg_stderr,none": 0.014411864034991638,
      "rougeL_avg,none": 13.98792672201246,
      "rougeL_avg_stderr,none": 0.9379356046757672,
      "bleu_avg,none": 3.9109195112716173,
      "bleu_avg_stderr,none": 0.4764287185048627,
      "alias": "norsumm_nb"
    },
    "prompt-0": {
      "bleu_max,none": 8.670795968111248,
      "bleu_max_stderr,none": 2.5744655060639086,
      "bleu_avg,none": 5.207213732474798,
      "bleu_avg_stderr,none": 1.330749575908902,
      "rougeL_max,none": 24.825679472837137,
      "rougeL_max_stderr,none": 3.2572742003132937,
      "rougeL_avg,none": 20.769499641243456,
      "rougeL_avg_stderr,none": 2.4636400085807693,
      "bertscore_f1_max,none": 0.6442263563474019,
      "bertscore_f1_max_stderr,none": 0.017418863296808838,
      "bertscore_f1_avg,none": 0.6293258312675687,
      "bertscore_f1_avg_stderr,none": 0.016174684182416438,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "bleu_max,none": 15.219037970691314,
      "bleu_max_stderr,none": 3.219109086149025,
      "bleu_avg,none": 8.56802504703955,
      "bleu_avg_stderr,none": 1.7183502907433101,
      "rougeL_max,none": 32.81386537833686,
      "rougeL_max_stderr,none": 4.073724769705402,
      "rougeL_avg,none": 26.615271646987477,
      "rougeL_avg_stderr,none": 3.0399108814869096,
      "bertscore_f1_max,none": 0.6693184455235799,
      "bertscore_f1_max_stderr,none": 0.020595147118840355,
      "bertscore_f1_avg,none": 0.6492347346411812,
      "bertscore_f1_avg_stderr,none": 0.01807502411545911,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "bleu_max,none": 2.738677227967648e-12,
      "bleu_max_stderr,none": 2.7197773078167393e-12,
      "bleu_avg,none": 1.4394935610102168e-12,
      "bleu_avg_stderr,none": 1.4259856365226738e-12,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.03811518351236979,
      "bertscore_f1_max_stderr,none": 0.026484394562982377,
      "bertscore_f1_avg,none": 0.037736376788881094,
      "bertscore_f1_avg_stderr,none": 0.026221557943721763,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "bleu_max,none": 0.39404454504973274,
      "bleu_max_stderr,none": 0.15099847408085693,
      "bleu_avg,none": 0.2625111596859311,
      "bleu_avg_stderr,none": 0.09254331977991193,
      "rougeL_max,none": 4.251314782493952,
      "rougeL_max_stderr,none": 1.3243351844294555,
      "rougeL_avg,none": 3.5845294339418685,
      "rougeL_avg_stderr,none": 1.1204956396920667,
      "bertscore_f1_max,none": 0.2723620335261027,
      "bertscore_f1_max_stderr,none": 0.05447077966051413,
      "bertscore_f1_avg,none": 0.26826736066076495,
      "bertscore_f1_avg_stderr,none": 0.05363303179817782,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "bleu_max,none": 11.626485384547443,
      "bleu_max_stderr,none": 2.8557920311452096,
      "bleu_avg,none": 7.288846233353229,
      "bleu_avg_stderr,none": 1.6503252814533997,
      "rougeL_max,none": 29.524744920367997,
      "rougeL_max_stderr,none": 3.8061301782328156,
      "rougeL_avg,none": 24.762973454794455,
      "rougeL_avg_stderr,none": 3.075883963943097,
      "bertscore_f1_max,none": 0.64818860689799,
      "bertscore_f1_max_stderr,none": 0.019690004944957634,
      "bertscore_f1_avg,none": 0.6326146718528534,
      "bertscore_f1_avg_stderr,none": 0.018974064404193535,
      "alias": " - prompt-4"
    },
    "prompt-5": {
      "bleu_max,none": 3.7261530093209316,
      "bleu_max_stderr,none": 1.5033447888481977,
      "bleu_avg,none": 2.1389208950747567,
      "bleu_avg_stderr,none": 0.8459761824444068,
      "rougeL_max,none": 10.210289951322641,
      "rougeL_max_stderr,none": 3.0138304205179964,
      "rougeL_avg,none": 8.195286155107501,
      "rougeL_avg_stderr,none": 2.375475162823701,
      "bertscore_f1_max,none": 0.31547453701496125,
      "bertscore_f1_max_stderr,none": 0.05623158193241759,
      "bertscore_f1_avg,none": 0.3065700199868945,
      "bertscore_f1_avg_stderr,none": 0.05445044970081459,
      "alias": " - prompt-5"
    }
  },
  "groups": {
    "norsumm_nb": {
      "bleu_max,none": 6.606086146287234,
      "bleu_max_stderr,none": 0.8728772691017712,
      "bertscore_f1_max,none": 0.43128086047040093,
      "bertscore_f1_max_stderr,none": 0.014856492199396505,
      "rougeL_max,none": 16.93764908422643,
      "rougeL_max_stderr,none": 1.2079451460750974,
      "bertscore_f1_avg,none": 0.4206248325330239,
      "bertscore_f1_avg_stderr,none": 0.014411864034991638,
      "rougeL_avg,none": 13.98792672201246,
      "rougeL_avg_stderr,none": 0.9379356046757672,
      "bleu_avg,none": 3.9109195112716173,
      "bleu_avg_stderr,none": 0.4764287185048627,
      "alias": "norsumm_nb"
    }
  },
  "group_subtasks": {
    "norsumm_nb": [
      "prompt-5",
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Skriv en oppsummering av følgende artikkel med kun noen få punkter: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Oppsummer følgende artikkel med noen få setninger: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "{{article}}\nSkriv en kort og presis oppsummering av teksten over. Språket må være klart og lett å forstå. Sørg for å ikke introdusere feil. Oppsummeringen må dekke følgende spørsmål: hvem, hva, hvor, når, og hvorfor er denne saken viktig å vite om. Oppsummeringen må være engasjerende og fremheve nøkkelinformasjon fra artikkelen. Oppsummeringen skal inneholde maksimalt 700 tegn, inkludert mellomrom.",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Gi et kortfattet sammendrag av følgende tekst: {{article}}",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Lag en kort oppsummering som sammenfatter den følgende teksten i noen få punkter:\n{{article}}\n\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-5": {
      "task": "prompt-5",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Hele artikkelen:\n{{article}}\n\nHovedpunkter:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml",
    "prompt-5": "Yaml"
  },
  "n-shot": {
    "norsumm_nb": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0,
    "prompt-5": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-7b-factual,cache_dir=/pfs/lustrep3/scratch/project_465000498/models/",
    "batch_size": "16",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1717538413.9697423,
  "pretty_env_info": "PyTorch version: 1.13.1+rocm5.2\nIs debug build: False\nCUDA used to build PyTorch: N/A\nROCM used to build PyTorch: 5.2.21151-afdc89f8\n\nOS: SUSE Linux Enterprise Server 15 SP4 (x86_64)\nGCC version: (SUSE Linux) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.4\nLibc version: glibc-2.31\n\nPython version: 3.9.12 (main, Apr 18 2022, 21:29:31)  [GCC 9.3.0 20200312 (Cray Inc.)] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.75-cray_shasta_c-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nNvidia driver version: Could not collect\ncuDNN version: Could not collect\nHIP runtime version: 5.2.21153\nMIOpen runtime version: 2.17.0\nIs XNNPACK available: True\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.24.2\n[pip3] numpyencoder==0.3.0\n[pip3] torch==1.13.1+rocm5.2\n[pip3] torchaudio==0.13.1+rocm5.2\n[pip3] torchmetrics==0.9.3\n[pip3] torchvision==0.14.1+rocm5.2\n[conda] Could not collect",
  "transformers_version": "4.37.1",
  "upper_git_hash": null
}