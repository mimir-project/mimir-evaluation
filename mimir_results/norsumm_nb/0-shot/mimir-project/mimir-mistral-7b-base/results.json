{
  "results": {
    "norsumm_nb": {
      "bleu_max,none": 8.209743661158612,
      "bleu_max_stderr,none": 0.9772560887300292,
      "bertscore_f1_max,none": 0.33707484288348094,
      "bertscore_f1_max_stderr,none": 0.015946579346359954,
      "bertscore_f1_avg,none": 0.32583206814748267,
      "bertscore_f1_avg_stderr,none": 0.015293037784793986,
      "rougeL_avg,none": 13.767410327272891,
      "rougeL_avg_stderr,none": 1.0012462634635741,
      "bleu_avg,none": 4.644114008844701,
      "bleu_avg_stderr,none": 0.5358699302813381,
      "rougeL_max,none": 16.790416947151783,
      "rougeL_max_stderr,none": 1.2900932056145875,
      "alias": "norsumm_nb"
    },
    "prompt-0": {
      "bleu_max,none": 19.468913646487078,
      "bleu_max_stderr,none": 3.3138005588209594,
      "bleu_avg,none": 10.643627001168019,
      "bleu_avg_stderr,none": 1.7246348331050632,
      "rougeL_max,none": 39.77840823671633,
      "rougeL_max_stderr,none": 3.7875445078329286,
      "rougeL_avg,none": 32.40278915066264,
      "rougeL_avg_stderr,none": 2.9018919526930613,
      "bertscore_f1_max,none": 0.7222587297360102,
      "bertscore_f1_max_stderr,none": 0.016962933740374313,
      "bertscore_f1_avg,none": 0.6962089942561256,
      "bertscore_f1_avg_stderr,none": 0.01453027568708995,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "bleu_max,none": 19.91915462248388,
      "bleu_max_stderr,none": 3.53635402295744,
      "bleu_avg,none": 11.556313130687785,
      "bleu_avg_stderr,none": 2.0743927170062397,
      "rougeL_max,none": 39.71512705197099,
      "rougeL_max_stderr,none": 4.185490601991041,
      "rougeL_avg,none": 32.986294136200385,
      "rougeL_avg_stderr,none": 3.252403541380434,
      "bertscore_f1_max,none": 0.7237469136714936,
      "bertscore_f1_max_stderr,none": 0.016268598627038184,
      "bertscore_f1_avg,none": 0.7022099945280285,
      "bertscore_f1_avg_stderr,none": 0.014870997471391631,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "bleu_max,none": 0.0,
      "bleu_max_stderr,none": 0.0,
      "bleu_avg,none": 0.0,
      "bleu_avg_stderr,none": 0.0,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.0,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.0,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "bleu_max,none": 0.01855458012193628,
      "bleu_max_stderr,none": 0.018544630653649894,
      "bleu_avg,none": 0.015563516460131932,
      "bleu_avg_stderr,none": 0.01555574962811861,
      "rougeL_max,none": 0.055555555555555546,
      "rougeL_max_stderr,none": 0.05555555555555549,
      "rougeL_avg,none": 0.052843158043539715,
      "rougeL_avg_stderr,none": 0.05284315804353971,
      "bertscore_f1_max,none": 0.09134699205557505,
      "bertscore_f1_max_stderr,none": 0.03802264847378498,
      "bertscore_f1_avg,none": 0.08965268664889865,
      "bertscore_f1_avg_stderr,none": 0.03733206700323256,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "bleu_max,none": 3.2285187230323666,
      "bleu_max_stderr,none": 2.071736815871919,
      "bleu_avg,none": 1.985287372403029,
      "bleu_avg_stderr,none": 1.1629519357985258,
      "rougeL_max,none": 7.3315854022867875,
      "rougeL_max_stderr,none": 3.2203468163722366,
      "rougeL_avg,none": 6.256184091778832,
      "rougeL_avg_stderr,none": 2.6697868795895348,
      "bertscore_f1_max,none": 0.17924235065778096,
      "bertscore_f1_max_stderr,none": 0.0561140755350935,
      "bertscore_f1_avg,none": 0.17607832815912033,
      "bertscore_f1_avg_stderr,none": 0.05506031712171327,
      "alias": " - prompt-4"
    },
    "prompt-5": {
      "bleu_max,none": 6.623320394826402,
      "bleu_max_stderr,none": 2.5693480514835603,
      "bleu_avg,none": 3.6638930323492405,
      "bleu_avg_stderr,none": 1.3067009299064003,
      "rougeL_max,none": 13.861825436381052,
      "rougeL_max_stderr,none": 4.20460607365097,
      "rougeL_avg,none": 10.906351426951959,
      "rougeL_avg_stderr,none": 3.155966856721171,
      "bertscore_f1_max,none": 0.3058540711800257,
      "bertscore_f1_max_stderr,none": 0.06330594324472182,
      "bertscore_f1_avg,none": 0.29084240529272287,
      "bertscore_f1_avg_stderr,none": 0.059682283326984616,
      "alias": " - prompt-5"
    }
  },
  "groups": {
    "norsumm_nb": {
      "bleu_max,none": 8.209743661158612,
      "bleu_max_stderr,none": 0.9772560887300292,
      "bertscore_f1_max,none": 0.33707484288348094,
      "bertscore_f1_max_stderr,none": 0.015946579346359954,
      "bertscore_f1_avg,none": 0.32583206814748267,
      "bertscore_f1_avg_stderr,none": 0.015293037784793986,
      "rougeL_avg,none": 13.767410327272891,
      "rougeL_avg_stderr,none": 1.0012462634635741,
      "bleu_avg,none": 4.644114008844701,
      "bleu_avg_stderr,none": 0.5358699302813381,
      "rougeL_max,none": 16.790416947151783,
      "rougeL_max_stderr,none": 1.2900932056145875,
      "alias": "norsumm_nb"
    }
  },
  "group_subtasks": {
    "norsumm_nb": [
      "prompt-5",
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Skriv en oppsummering av følgende artikkel med kun noen få punkter: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Oppsummer følgende artikkel med noen få setninger: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "{{article}}\nSkriv en kort og presis oppsummering av teksten over. Språket må være klart og lett å forstå. Sørg for å ikke introdusere feil. Oppsummeringen må dekke følgende spørsmål: hvem, hva, hvor, når, og hvorfor er denne saken viktig å vite om. Oppsummeringen må være engasjerende og fremheve nøkkelinformasjon fra artikkelen. Oppsummeringen skal inneholde maksimalt 700 tegn, inkludert mellomrom.",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Gi et kortfattet sammendrag av følgende tekst: {{article}}",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Lag en kort oppsummering som sammenfatter den følgende teksten i noen få punkter:\n{{article}}\n\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-5": {
      "task": "prompt-5",
      "dataset_path": "ltg/norsumm",
      "dataset_name": "nb",
      "test_split": "test",
      "doc_to_text": "Hele artikkelen:\n{{article}}\n\nHovedpunkter:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml",
    "prompt-5": "Yaml"
  },
  "n-shot": {
    "norsumm_nb": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0,
    "prompt-5": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-mistral-7b-base,cache_dir=/pfs/lustrep3/scratch/project_465000498/models/",
    "batch_size": "16",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1717534643.557846,
  "pretty_env_info": "PyTorch version: 1.13.1+rocm5.2\nIs debug build: False\nCUDA used to build PyTorch: N/A\nROCM used to build PyTorch: 5.2.21151-afdc89f8\n\nOS: SUSE Linux Enterprise Server 15 SP4 (x86_64)\nGCC version: (SUSE Linux) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.4\nLibc version: glibc-2.31\n\nPython version: 3.9.12 (main, Apr 18 2022, 21:29:31)  [GCC 9.3.0 20200312 (Cray Inc.)] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.75-cray_shasta_c-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nNvidia driver version: Could not collect\ncuDNN version: Could not collect\nHIP runtime version: 5.2.21153\nMIOpen runtime version: 2.17.0\nIs XNNPACK available: True\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.24.2\n[pip3] numpyencoder==0.3.0\n[pip3] torch==1.13.1+rocm5.2\n[pip3] torchaudio==0.13.1+rocm5.2\n[pip3] torchmetrics==0.9.3\n[pip3] torchvision==0.14.1+rocm5.2\n[conda] Could not collect",
  "transformers_version": "4.37.1",
  "upper_git_hash": null
}