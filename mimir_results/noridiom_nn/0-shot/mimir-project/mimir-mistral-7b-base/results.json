{
  "results": {
    "noridiom_nn": {
      "em,none": 0.1261845386533666,
      "em_stderr,none": 0.007097293659641408,
      "fscore,none": 0.17863816582094433,
      "fscore_stderr,none": 0.006902496148798814,
      "alias": "noridiom_nn"
    },
    "prompt-0": {
      "em,none": 0.26184538653366585,
      "em_stderr,none": 0.021981946006023934,
      "fscore,none": 0.3079095805991804,
      "fscore_stderr,none": 0.021254503710500007,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "em,none": 0.2169576059850374,
      "em_stderr,none": 0.020608675551225995,
      "fscore,none": 0.29875292059170655,
      "fscore_stderr,none": 0.019688668115292005,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "em,none": 0.0,
      "em_stderr,none": 0.0,
      "fscore,none": 0.0075516703725593244,
      "fscore_stderr,none": 0.0015767049208487613,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "em,none": 0.0773067331670823,
      "em_stderr,none": 0.013353876045376824,
      "fscore,none": 0.1401750678705351,
      "fscore_stderr,none": 0.013209813691147827,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "em,none": 0.07481296758104738,
      "em_stderr,none": 0.01315446573057653,
      "fscore,none": 0.13880158967074027,
      "fscore_stderr,none": 0.013218493515091715,
      "alias": " - prompt-4"
    }
  },
  "groups": {
    "noridiom_nn": {
      "em,none": 0.1261845386533666,
      "em_stderr,none": 0.007097293659641408,
      "fscore,none": 0.17863816582094433,
      "fscore_stderr,none": 0.006902496148798814,
      "alias": "noridiom_nn"
    }
  },
  "group_subtasks": {
    "noridiom_nn": [
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "mimir-project/noridiom",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Fullfør dette uttrykket: {{idiom}}",
      "doc_to_target": "completion",
      "process_results": "def process_results(doc, results):\n    prediction = normalize(results[0])\n    completion = normalize(doc[\"completion\"])\n    exact_match = int(completion == prediction)\n    fscore = f1(prediction=prediction, completion=completion)\n    return {\"em\": exact_match, \"fscore\": fscore}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "em",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "fscore",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 16
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "mimir-project/noridiom",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Skriv fortsetjinga av idiomet {{idiom}}",
      "doc_to_target": "completion",
      "process_results": "def process_results(doc, results):\n    prediction = normalize(results[0])\n    completion = normalize(doc[\"completion\"])\n    exact_match = int(completion == prediction)\n    fscore = f1(prediction=prediction, completion=completion)\n    return {\"em\": exact_match, \"fscore\": fscore}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "em",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "fscore",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 16
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "mimir-project/noridiom",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Korleis fortset uttrykket \"{{idiom}}\"?",
      "doc_to_target": "completion",
      "process_results": "def process_results(doc, results):\n    prediction = normalize(results[0])\n    completion = normalize(doc[\"completion\"])\n    exact_match = int(completion == prediction)\n    fscore = f1(prediction=prediction, completion=completion)\n    return {\"em\": exact_match, \"fscore\": fscore}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "em",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "fscore",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 16
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "mimir-project/noridiom",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Fullfør vendinga: {{idiom}}",
      "doc_to_target": "completion",
      "process_results": "def process_results(doc, results):\n    prediction = normalize(results[0])\n    completion = normalize(doc[\"completion\"])\n    exact_match = int(completion == prediction)\n    fscore = f1(prediction=prediction, completion=completion)\n    return {\"em\": exact_match, \"fscore\": fscore}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "em",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "fscore",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 16
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "mimir-project/noridiom",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "{{idiom}}",
      "doc_to_target": "completion",
      "process_results": "def process_results(doc, results):\n    prediction = normalize(results[0])\n    completion = normalize(doc[\"completion\"])\n    exact_match = int(completion == prediction)\n    fscore = f1(prediction=prediction, completion=completion)\n    return {\"em\": exact_match, \"fscore\": fscore}\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "em",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "fscore",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 16
      },
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml"
  },
  "n-shot": {
    "noridiom_nn": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-mistral-7b-base,cache_dir=/pfs/lustrep3/scratch/project_465000498/models/",
    "batch_size": "32",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1717538355.1449142,
  "pretty_env_info": "PyTorch version: 1.13.1+rocm5.2\nIs debug build: False\nCUDA used to build PyTorch: N/A\nROCM used to build PyTorch: 5.2.21151-afdc89f8\n\nOS: SUSE Linux Enterprise Server 15 SP4 (x86_64)\nGCC version: (SUSE Linux) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.4\nLibc version: glibc-2.31\n\nPython version: 3.9.12 (main, Apr 18 2022, 21:29:31)  [GCC 9.3.0 20200312 (Cray Inc.)] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.75-cray_shasta_c-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nNvidia driver version: Could not collect\ncuDNN version: Could not collect\nHIP runtime version: 5.2.21153\nMIOpen runtime version: 2.17.0\nIs XNNPACK available: True\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.24.2\n[pip3] numpyencoder==0.3.0\n[pip3] torch==1.13.1+rocm5.2\n[pip3] torchaudio==0.13.1+rocm5.2\n[pip3] torchmetrics==0.9.3\n[pip3] torchvision==0.14.1+rocm5.2\n[conda] Could not collect",
  "transformers_version": "4.37.1",
  "upper_git_hash": null
}