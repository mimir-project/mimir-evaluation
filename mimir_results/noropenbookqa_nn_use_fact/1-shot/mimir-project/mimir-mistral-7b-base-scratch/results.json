{
  "results": {
    "noropenbookqa_nn_use_fact": {
      "acc_norm,none": 0.34,
      "acc_norm_stderr,none": 0.022098281084980475,
      "acc,none": 0.2688888888888889,
      "acc_stderr,none": 0.02097498658931568,
      "alias": "noropenbookqa_nn_use_fact"
    },
    "prompt-0": {
      "acc,none": 0.3111111111111111,
      "acc_stderr,none": 0.04907240553386408,
      "acc_norm,none": 0.4666666666666667,
      "acc_norm_stderr,none": 0.05288198530254015,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "acc,none": 0.26666666666666666,
      "acc_stderr,none": 0.04687486995404352,
      "acc_norm,none": 0.4111111111111111,
      "acc_norm_stderr,none": 0.05215564061107555,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "acc,none": 0.24444444444444444,
      "acc_stderr,none": 0.045554185296526196,
      "acc_norm,none": 0.24444444444444444,
      "acc_norm_stderr,none": 0.045554185296526196,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "acc,none": 0.28888888888888886,
      "acc_stderr,none": 0.04804399888461699,
      "acc_norm,none": 0.28888888888888886,
      "acc_norm_stderr,none": 0.04804399888461699,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "acc,none": 0.23333333333333334,
      "acc_stderr,none": 0.04483288431057598,
      "acc_norm,none": 0.28888888888888886,
      "acc_norm_stderr,none": 0.04804399888461698,
      "alias": " - prompt-4"
    }
  },
  "groups": {
    "noropenbookqa_nn_use_fact": {
      "acc_norm,none": 0.34,
      "acc_norm_stderr,none": 0.022098281084980475,
      "acc,none": 0.2688888888888889,
      "acc_stderr,none": 0.02097498658931568,
      "alias": "noropenbookqa_nn_use_fact"
    }
  },
  "group_subtasks": {
    "noropenbookqa_nn_use_fact": [
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "ltg/noropenbookqa",
      "dataset_name": "nn",
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def filter_dataset(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.filter(lambda example: len(example[\"fact\"]) > 0)\n",
      "doc_to_text": "{{fact}}\n{{question_stem}}",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 1,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "ltg/noropenbookqa",
      "dataset_name": "nn",
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def filter_dataset(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.filter(lambda example: len(example[\"fact\"]) > 0)\n",
      "doc_to_text": "Faktatekst: {{fact}}\nSpørsmål til teksten: {{question_stem}}\n\nSvaralternativer:\n- {{choices.text[0]}}\n- {{choices.text[1]}}\n- {{choices.text[2]}}\n- {{choices.text[3]}}\n\nKva er rett svar?",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 1,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "ltg/noropenbookqa",
      "dataset_name": "nn",
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def filter_dataset(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.filter(lambda example: len(example[\"fact\"]) > 0)\n",
      "doc_to_text": "{{fact}}\n{{question_stem}}\nA: {{choices.text[0]}}\nB: {{choices.text[1]}}\nC: {{choices.text[2]}}\nD: {{choices.text[3]}}\n\nEr det rette svaret A, B, C, eller D?\n\nSvar:",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.label}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 1,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "ltg/noropenbookqa",
      "dataset_name": "nn",
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def filter_dataset(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.filter(lambda example: len(example[\"fact\"]) > 0)\n",
      "doc_to_text": "Bakgrunn: {{fact}}\n\nSpørsmål: {{question_stem}}\nA: {{choices.text[0]}}\nB: {{choices.text[1]}}\nC: {{choices.text[2]}}\nD: {{choices.text[3]}}\n\nSvar:",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.label}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 1,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "ltg/noropenbookqa",
      "dataset_name": "nn",
      "training_split": "train",
      "test_split": "test",
      "process_docs": "def filter_dataset(dataset: datasets.Dataset) -> datasets.Dataset:\n    return dataset.filter(lambda example: len(example[\"fact\"]) > 0)\n",
      "doc_to_text": "Ta utgangspunkt i følgande fakta når du svarar på spørsmålet: {{fact}}\n\n{{question_stem}}\nVel rett svar blant desse alternativa:\n– {{choices.text[0]}}\n– {{choices.text[1]}}\n– {{choices.text[2]}}\n– {{choices.text[3]}}\n\nSvar:",
      "doc_to_target": "{{choices.label.index(answer)}}",
      "doc_to_choice": "{{choices.text}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 1,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml"
  },
  "n-shot": {
    "noropenbookqa_nn_use_fact": 1,
    "prompt-0": 1,
    "prompt-1": 1,
    "prompt-2": 1,
    "prompt-3": 1,
    "prompt-4": 1
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-mistral-7b-base-scratch,cache_dir=/pfs/lustrep3/scratch/project_465000498/models/",
    "batch_size": "64",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1717684467.100812,
  "pretty_env_info": "PyTorch version: 1.13.1+rocm5.2\nIs debug build: False\nCUDA used to build PyTorch: N/A\nROCM used to build PyTorch: 5.2.21151-afdc89f8\n\nOS: SUSE Linux Enterprise Server 15 SP4 (x86_64)\nGCC version: (SUSE Linux) 7.5.0\nClang version: Could not collect\nCMake version: version 3.20.4\nLibc version: glibc-2.31\n\nPython version: 3.9.12 (main, Apr 18 2022, 21:29:31)  [GCC 9.3.0 20200312 (Cray Inc.)] (64-bit runtime)\nPython platform: Linux-5.14.21-150400.24.81_12.0.75-cray_shasta_c-x86_64-with-glibc2.31\nIs CUDA available: True\nCUDA runtime version: Could not collect\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nNvidia driver version: Could not collect\ncuDNN version: Could not collect\nHIP runtime version: 5.2.21153\nMIOpen runtime version: 2.17.0\nIs XNNPACK available: True\n\nVersions of relevant libraries:\n[pip3] mypy-extensions==1.0.0\n[pip3] numpy==1.24.2\n[pip3] numpyencoder==0.3.0\n[pip3] torch==1.13.1+rocm5.2\n[pip3] torchaudio==0.13.1+rocm5.2\n[pip3] torchmetrics==0.9.3\n[pip3] torchvision==0.14.1+rocm5.2\n[conda] Could not collect",
  "transformers_version": "4.37.1",
  "upper_git_hash": null
}