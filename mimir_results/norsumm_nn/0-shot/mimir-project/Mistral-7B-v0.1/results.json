{
  "results": {
    "norsumm_nn": {
      "bertscore_f1_max,none": 0.08860487722688251,
      "bertscore_f1_max_stderr,none": 0.008376849145798225,
      "bleu_max,none": 0.24472902421395343,
      "bleu_max_stderr,none": 0.0683047259172412,
      "bleu_avg,none": 0.1560269516809088,
      "bleu_avg_stderr,none": 0.03784955178507798,
      "bertscore_f1_avg,none": 0.0868568546242184,
      "bertscore_f1_avg_stderr,none": 0.008194387428961045,
      "rougeL_max,none": 2.0403008939267737,
      "rougeL_max_stderr,none": 0.31453512319779686,
      "rougeL_avg,none": 1.7315949931396346,
      "rougeL_avg_stderr,none": 0.27446475181279845,
      "alias": "norsumm_nn"
    },
    "prompt-0": {
      "bleu_max,none": 0.0,
      "bleu_max_stderr,none": 0.0,
      "bleu_avg,none": 0.0,
      "bleu_avg_stderr,none": 0.0,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.0,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.0,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "bleu_max,none": 0.007225157809636229,
      "bleu_max_stderr,none": 0.007225157809636226,
      "bleu_avg,none": 0.0038487814963522253,
      "bleu_avg_stderr,none": 0.003848781496352225,
      "rougeL_max,none": 0.6666666666666666,
      "rougeL_max_stderr,none": 0.6666666666666667,
      "rougeL_avg,none": 0.5378560869391505,
      "rougeL_avg_stderr,none": 0.5378560869391504,
      "bertscore_f1_max,none": 0.025204793612162272,
      "bertscore_f1_max_stderr,none": 0.025204793612162258,
      "bertscore_f1_avg,none": 0.024332432614432443,
      "bertscore_f1_avg_stderr,none": 0.024332432614432454,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "bleu_max,none": 0.0,
      "bleu_max_stderr,none": 0.0,
      "bleu_avg,none": 0.0,
      "bleu_avg_stderr,none": 0.0,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.0,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.0,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "bleu_max,none": 1.4611489874740842,
      "bleu_max_stderr,none": 0.4097646618112471,
      "bleu_avg,none": 0.9323129285891006,
      "bleu_avg_stderr,none": 0.22706469433383986,
      "rougeL_max,none": 11.575138696893976,
      "rougeL_max_stderr,none": 1.7655367256609171,
      "rougeL_avg,none": 9.851713871898657,
      "rougeL_avg_stderr,none": 1.556477828077966,
      "bertscore_f1_max,none": 0.5064244697491328,
      "bertscore_f1_max_stderr,none": 0.04348443442176615,
      "bertscore_f1_avg,none": 0.49680869513087794,
      "bertscore_f1_avg_stderr,none": 0.04272306397201676,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "bleu_max,none": 0.0,
      "bleu_max_stderr,none": 0.0,
      "bleu_avg,none": 0.0,
      "bleu_avg_stderr,none": 0.0,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.0,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.0,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-4"
    },
    "prompt-5": {
      "bleu_max,none": 0.0,
      "bleu_max_stderr,none": 0.0,
      "bleu_avg,none": 0.0,
      "bleu_avg_stderr,none": 0.0,
      "rougeL_max,none": 0.0,
      "rougeL_max_stderr,none": 0.0,
      "rougeL_avg,none": 0.0,
      "rougeL_avg_stderr,none": 0.0,
      "bertscore_f1_max,none": 0.0,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.0,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-5"
    }
  },
  "groups": {
    "norsumm_nn": {
      "bertscore_f1_max,none": 0.08860487722688251,
      "bertscore_f1_max_stderr,none": 0.008376849145798225,
      "bleu_max,none": 0.24472902421395343,
      "bleu_max_stderr,none": 0.0683047259172412,
      "bleu_avg,none": 0.1560269516809088,
      "bleu_avg_stderr,none": 0.03784955178507798,
      "bertscore_f1_avg,none": 0.0868568546242184,
      "bertscore_f1_avg_stderr,none": 0.008194387428961045,
      "rougeL_max,none": 2.0403008939267737,
      "rougeL_max_stderr,none": 0.31453512319779686,
      "rougeL_avg,none": 1.7315949931396346,
      "rougeL_avg_stderr,none": 0.27446475181279845,
      "alias": "norsumm_nn"
    }
  },
  "group_subtasks": {
    "norsumm_nn": [
      "prompt-5",
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Skriv ei oppsummering av følgande artikkel med berre nokre få punkt: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Oppsummer følgande artikkel med nokre få setningar: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "{{article}}\nSkriv ein kort og presis oppsummering av teksten over. Språket må vere klart og lett å forstå. Sørg for å ikkje introdusere feil. Oppsummeringa må dekkje følgande spørsmål: kven, kva, kor, når, og kvifor er denne saka viktig å vite om. Oppsummeringa må vere engasjerande og framheve nøkkelinformasjon frå artikkelen. Oppsummeringa skal innehalde maksimalt 700 tegn, inkludert mellomrom.",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Gje eit kortfatta samandrag av følgande tekst: {{article}}",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Lag ein kort oppsummering som samanfattar den følgande teksten i nokre få punkt:\n{{article}}\n\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-5": {
      "task": "prompt-5",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Heile artikkelen:\n{{article}}\n\nHovudpunkt:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    bertscore_f1s = [\n        bertscore_f1(references=[reference], predictions=[completion])\n        for reference in references\n    ]\n    bertscore_f1_max = np.nanmax(bertscore_f1s)\n    bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg,\n        \"bertscore_f1_max\": bertscore_f1_max,\n        \"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bertscore_f1_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml",
    "prompt-5": "Yaml"
  },
  "n-shot": {
    "norsumm_nn": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0,
    "prompt-5": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mistralai/Mistral-7B-v0.1",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1719235420.7726262,
  "pretty_env_info": "PyTorch version: 2.3.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Rocky Linux release 9.2 (Blue Onyx) (x86_64)\nGCC version: (GCC) 12.3.0\nClang version: Could not collect\nCMake version: version 3.26.3\nLibc version: glibc-2.34\n\nPython version: 3.11.3 (main, Apr 15 2024, 20:46:40) [GCC 12.3.0] (64-bit runtime)\nPython platform: Linux-5.14.0-284.11.1.el9_2.x86_64-x86_64-with-glibc2.34\nIs CUDA available: True\nCUDA runtime version: 11.8.89\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: \nGPU 0: NVIDIA A100-SXM4-80GB\nGPU 1: NVIDIA A100-SXM4-80GB\nGPU 2: NVIDIA A100-SXM4-80GB\nGPU 3: NVIDIA A100-SXM4-80GB\n\nNvidia driver version: 545.23.08\ncuDNN version: Could not collect\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                    x86_64\nCPU op-mode(s):                  32-bit, 64-bit\nAddress sizes:                   48 bits physical, 48 bits virtual\nByte Order:                      Little Endian\nCPU(s):                          64\nOn-line CPU(s) list:             0-63\nVendor ID:                       AuthenticAMD\nModel name:                      AMD EPYC 75F3 32-Core Processor\nCPU family:                      25\nModel:                           1\nThread(s) per core:              1\nCore(s) per socket:              32\nSocket(s):                       2\nStepping:                        1\nBogoMIPS:                        5888.72\nFlags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf rapl pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 invpcid_single hw_pstate ssbd mba ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 invpcid cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd amd_ppin brs arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold v_vmsave_vmload vgif v_spec_ctrl umip pku ospke vaes vpclmulqdq rdpid overflow_recov succor smca\nVirtualization:                  AMD-V\nL1d cache:                       2 MiB (64 instances)\nL1i cache:                       2 MiB (64 instances)\nL2 cache:                        32 MiB (64 instances)\nL3 cache:                        512 MiB (16 instances)\nNUMA node(s):                    8\nNUMA node0 CPU(s):               0-7\nNUMA node1 CPU(s):               8-15\nNUMA node2 CPU(s):               16-23\nNUMA node3 CPU(s):               24-31\nNUMA node4 CPU(s):               32-39\nNUMA node5 CPU(s):               40-47\nNUMA node6 CPU(s):               48-55\nNUMA node7 CPU(s):               56-63\nVulnerability Itlb multihit:     Not affected\nVulnerability L1tf:              Not affected\nVulnerability Mds:               Not affected\nVulnerability Meltdown:          Not affected\nVulnerability Mmio stale data:   Not affected\nVulnerability Retbleed:          Not affected\nVulnerability Spec store bypass: Mitigation; Speculative Store Bypass disabled via prctl\nVulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization\nVulnerability Spectre v2:        Mitigation; Retpolines, IBPB conditional, IBRS_FW, STIBP disabled, RSB filling, PBRSB-eIBRS Not affected\nVulnerability Srbds:             Not affected\nVulnerability Tsx async abort:   Not affected\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] torch==2.3.1\n[pip3] triton==2.3.1\n[conda] Could not collect",
  "transformers_version": "4.41.2",
  "upper_git_hash": null
}