{
  "results": {
    "norsumm_nn": {
      "bleu_max,none": 4.071717790504101,
      "bleu_max_stderr,none": 0.5355635180037313,
      "rougeL_avg,none": 12.758156415655925,
      "rougeL_avg_stderr,none": 0.7842453800542303,
      "rougeL_max,none": 15.311179253089175,
      "rougeL_max_stderr,none": 0.979894393889958,
      "bleu_avg,none": 2.4951644231949874,
      "bleu_avg_stderr,none": 0.2999150093637071,
      "alias": "norsumm_nn"
    },
    "prompt-0": {
      "bleu_max,none": 6.154919043781217,
      "bleu_max_stderr,none": 1.6945547652371635,
      "bleu_avg,none": 3.8087404587148046,
      "bleu_avg_stderr,none": 0.9697808285935613,
      "rougeL_max,none": 24.442752417359777,
      "rougeL_max_stderr,none": 2.8350717010377937,
      "rougeL_avg,none": 20.313334918817453,
      "rougeL_avg_stderr,none": 2.2710337887613474,
      "bertscore_f1_max,none": 0.664050285021464,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.6466732604636084,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-0"
    },
    "prompt-1": {
      "bleu_max,none": 7.9438257285903555,
      "bleu_max_stderr,none": 1.8645401111541497,
      "bleu_avg,none": 4.75717100767218,
      "bleu_avg_stderr,none": 1.0462696012160024,
      "rougeL_max,none": 28.79422124885596,
      "rougeL_max_stderr,none": 2.8447599603743554,
      "rougeL_avg,none": 23.89486987142161,
      "rougeL_avg_stderr,none": 2.153966319061097,
      "bertscore_f1_max,none": 0.7003392934799194,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.6795730531215668,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-1"
    },
    "prompt-2": {
      "bleu_max,none": 1.3320159742358343e-08,
      "bleu_max_stderr,none": 1.3320159742358343e-08,
      "bleu_avg,none": 6.750783226536062e-09,
      "bleu_avg_stderr,none": 6.7507832265360615e-09,
      "rougeL_max,none": 0.10498687664041993,
      "rougeL_max_stderr,none": 0.10498687664041993,
      "rougeL_avg,none": 0.07205582520863232,
      "rougeL_avg_stderr,none": 0.07205582520863234,
      "bertscore_f1_max,none": 0.01980750560760498,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.01951191888915168,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-2"
    },
    "prompt-3": {
      "bleu_max,none": 0.3947545404726195,
      "bleu_max_stderr,none": 0.2299856147337071,
      "bleu_avg,none": 0.32743163806862235,
      "bleu_avg_stderr,none": 0.18382418926531544,
      "rougeL_max,none": 3.189881300950822,
      "rougeL_max_stderr,none": 1.3191039515733747,
      "rougeL_avg,none": 2.5806860711720603,
      "rougeL_avg_stderr,none": 1.0652638172895428,
      "bertscore_f1_max,none": 0.25248413781325024,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.24853528042634332,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-3"
    },
    "prompt-4": {
      "bleu_max,none": 6.994089209929452,
      "bleu_max_stderr,none": 1.635546104163907,
      "bleu_avg,none": 4.150077989048017,
      "bleu_avg_stderr,none": 0.8710488713258568,
      "rougeL_max,none": 24.55216063227534,
      "rougeL_max_stderr,none": 2.967753307983679,
      "rougeL_avg,none": 20.351811201740738,
      "rougeL_avg_stderr,none": 2.3668113546467695,
      "bertscore_f1_max,none": 0.6030880192915599,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.5855251729488372,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-4"
    },
    "prompt-5": {
      "bleu_max,none": 2.942718206930805,
      "bleu_max_stderr,none": 1.1179839109192509,
      "bleu_avg,none": 1.9275654389155152,
      "bleu_avg_stderr,none": 0.6406965424952465,
      "rougeL_max,none": 10.783073042452749,
      "rougeL_max_stderr,none": 2.8067847932866448,
      "rougeL_avg,none": 9.33618060557506,
      "rougeL_avg_stderr,none": 2.3669661967817692,
      "bertscore_f1_max,none": 0.32380343476931256,
      "bertscore_f1_max_stderr,none": 0.0,
      "bertscore_f1_avg,none": 0.3171489804983139,
      "bertscore_f1_avg_stderr,none": 0.0,
      "alias": " - prompt-5"
    }
  },
  "groups": {
    "norsumm_nn": {
      "bleu_max,none": 4.071717790504101,
      "bleu_max_stderr,none": 0.5355635180037313,
      "rougeL_avg,none": 12.758156415655925,
      "rougeL_avg_stderr,none": 0.7842453800542303,
      "rougeL_max,none": 15.311179253089175,
      "rougeL_max_stderr,none": 0.979894393889958,
      "bleu_avg,none": 2.4951644231949874,
      "bleu_avg_stderr,none": 0.2999150093637071,
      "alias": "norsumm_nn"
    }
  },
  "group_subtasks": {
    "norsumm_nn": [
      "prompt-5",
      "prompt-4",
      "prompt-3",
      "prompt-2",
      "prompt-1",
      "prompt-0"
    ]
  },
  "configs": {
    "prompt-0": {
      "task": "prompt-0",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Skriv ei oppsummering av følgande artikkel med berre nokre få punkt: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-1": {
      "task": "prompt-1",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Oppsummer følgande artikkel med nokre få setningar: {{article}}\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-2": {
      "task": "prompt-2",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "{{article}}\nSkriv ein kort og presis oppsummering av teksten over. Språket må vere klart og lett å forstå. Sørg for å ikkje introdusere feil. Oppsummeringa må dekkje følgande spørsmål: kven, kva, kor, når, og kvifor er denne saka viktig å vite om. Oppsummeringa må vere engasjerande og framheve nøkkelinformasjon frå artikkelen. Oppsummeringa skal innehalde maksimalt 700 tegn, inkludert mellomrom.",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-3": {
      "task": "prompt-3",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Gje eit kortfatta samandrag av følgande tekst: {{article}}",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": "\n",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-4": {
      "task": "prompt-4",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Lag ein kort oppsummering som samanfattar den følgande teksten i nokre få punkt:\n{{article}}\n\nOppsummering:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    },
    "prompt-5": {
      "task": "prompt-5",
      "dataset_path": "mimir-project/norsumm",
      "dataset_name": "nn",
      "test_split": "test",
      "doc_to_text": "Heile artikkelen:\n{{article}}\n\nHovudpunkt:",
      "doc_to_target": "summaries",
      "process_results": "def process_results(doc, results):\n    completion = results[0]\n    references = doc[\"summaries\"]\n\n    bleu_scores = [bleu([[reference]], [completion]) for reference in references]\n    bleu_max = np.nanmax(bleu_scores)\n    bleu_avg = np.nanmean(bleu_scores)\n\n    rouge_scores = [rouge([reference], [completion]) for reference in references]\n    rougeL_scores = [score[\"rougeLsum\"] for score in rouge_scores]\n    rougeL_max = np.nanmax(rougeL_scores)\n    rougeL_avg = np.nanmean(rougeL_scores)\n\n    #bertscore_f1s = [\n    #    bertscore_f1(references=[reference], predictions=[completion])\n    #    for reference in references\n    #]\n    #bertscore_f1_max = np.nanmax(bertscore_f1s)\n    #bertscore_f1_avg = np.nanmean(bertscore_f1s)\n\n    return {\n        \"bleu_max\": bleu_max,\n        \"bleu_avg\": bleu_avg,\n        \"rougeL_max\": rougeL_max,\n        \"rougeL_avg\": rougeL_avg\n        #\"bertscore_f1_max\": bertscore_f1_max,\n        #\"bertscore_f1_avg\": bertscore_f1_avg,\n    }\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "bleu_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "bleu_avg",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_max",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "rougeL_avg",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "\n"
        ],
        "do_sample": false,
        "num_beams": 1,
        "max_new_tokens": 256
      },
      "repeats": 1,
      "should_decontaminate": false
    }
  },
  "versions": {
    "prompt-0": "Yaml",
    "prompt-1": "Yaml",
    "prompt-2": "Yaml",
    "prompt-3": "Yaml",
    "prompt-4": "Yaml",
    "prompt-5": "Yaml"
  },
  "n-shot": {
    "norsumm_nn": 0,
    "prompt-0": 0,
    "prompt-1": 0,
    "prompt-2": 0,
    "prompt-3": 0,
    "prompt-4": 0,
    "prompt-5": 0
  },
  "config": {
    "model": "hf",
    "model_args": "pretrained=mimir-project/mimir-mistral-7b-core-scratch",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null
  },
  "git_hash": null,
  "date": 1736760492.904197,
  "pretty_env_info": "PyTorch version: 2.5.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Ubuntu 22.04.3 LTS (x86_64)\nGCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\nClang version: 14.0.0-1ubuntu1.1\nCMake version: version 3.31.2\nLibc version: glibc-2.35\n\nPython version: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0] (64-bit runtime)\nPython platform: Linux-6.1.85+-x86_64-with-glibc2.35\nIs CUDA available: True\nCUDA runtime version: 12.2.140\nCUDA_MODULE_LOADING set to: LAZY\nGPU models and configuration: GPU 0: NVIDIA A100-SXM4-40GB\nNvidia driver version: 535.104.05\ncuDNN version: Probably one of the following:\n/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.6\n/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.6\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:                         x86_64\nCPU op-mode(s):                       32-bit, 64-bit\nAddress sizes:                        46 bits physical, 48 bits virtual\nByte Order:                           Little Endian\nCPU(s):                               12\nOn-line CPU(s) list:                  0-11\nVendor ID:                            GenuineIntel\nModel name:                           Intel(R) Xeon(R) CPU @ 2.20GHz\nCPU family:                           6\nModel:                                85\nThread(s) per core:                   2\nCore(s) per socket:                   6\nSocket(s):                            1\nStepping:                             7\nBogoMIPS:                             4400.39\nFlags:                                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm mpx avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves arat avx512_vnni md_clear arch_capabilities\nHypervisor vendor:                    KVM\nVirtualization type:                  full\nL1d cache:                            192 KiB (6 instances)\nL1i cache:                            192 KiB (6 instances)\nL2 cache:                             6 MiB (6 instances)\nL3 cache:                             38.5 MiB (1 instance)\nNUMA node(s):                         1\nNUMA node0 CPU(s):                    0-11\nVulnerability Gather data sampling:   Not affected\nVulnerability Itlb multihit:          Not affected\nVulnerability L1tf:                   Not affected\nVulnerability Mds:                    Not affected\nVulnerability Meltdown:               Not affected\nVulnerability Mmio stale data:        Vulnerable\nVulnerability Reg file data sampling: Not affected\nVulnerability Retbleed:               Vulnerable\nVulnerability Spec rstack overflow:   Not affected\nVulnerability Spec store bypass:      Vulnerable\nVulnerability Spectre v1:             Vulnerable: __user pointer sanitization and usercopy barriers only; no swapgs barriers\nVulnerability Spectre v2:             Vulnerable; IBPB: disabled; STIBP: disabled; PBRSB-eIBRS: Vulnerable; BHI: Vulnerable (Syscall hardening enabled)\nVulnerability Srbds:                  Not affected\nVulnerability Tsx async abort:        Vulnerable\n\nVersions of relevant libraries:\n[pip3] numpy==1.26.4\n[pip3] optree==0.13.1\n[pip3] torch==2.5.1+cu121\n[pip3] torchaudio==2.5.1+cu121\n[pip3] torchsummary==1.5.1\n[pip3] torchvision==0.20.1+cu121\n[conda] Could not collect",
  "transformers_version": "4.47.1",
  "upper_git_hash": null
}